{"name":"Qonsole","tagline":"A simple console for running SPARQL queries and displaying results","body":"# Qonsole - a simple console for running SPARQL queries\r\n\r\nSuppose you have a linked-data dataset that you've published on the web, and that\r\nyou'd like to provide your users with the means to run SPARQL queries to explore \r\nyour data. Most SPARQL end-points allow you to use HTTP `get` and `post` commands\r\nto send a query and get back results, so it's easy enough to put up an HTML form for \r\nyour users to type in a query and get back some results. But that's not necessarily\r\nthat helpful for your users, because:\r\n\r\n  * in some browsers, hitting the 'back' button after posting a query means that the\r\n  text input control is emptied. So your users will lose the query that they have typed, \r\n  which makes iterative development of the query hard.\r\n  * you can provide at most one sample query to get your users started with suggestions\r\n  and ideas.\r\n  * you don't have any to manage prefixes, which can make a huge difference to the\r\n  readability of a query (compare `<http://www.w3.org/2000/01/rdf-schema#comment>` to\r\n  `rdfs:comment`, for example).\r\n  * the returned values from a SPARQL form are generally represented as a text format, or\r\n  using a MIME type (e.g. `text/csv` that makes your user's computer open the returning file\r\n  in another program (e.g. a spreadsheet). Plain text can be hard to explore, while opening a\r\n  different application takes your user's focus away from the task of editing the query and\r\n  exploring your data.\r\n\r\nQonsole provides the following features:\r\n\r\n  * An edit control with SPARQL syntax highlighting, undo, and other familiar code editing \r\n  features (courtesy of [CodeMirror](http://codemirror.net/)).\r\n  * Display of the query and the return result on one page\r\n  * A configurable set of example queries your users can select with one click\r\n  * A configurable set of pre-declared prefixes, and the ability to add new prefixes dynamically,\r\n  including looking a well-know prefix up on [prefix.cc](http://prefix.cc). Users can add or\r\n  remove prefix declarations from the edit window with one click.\r\n  * A choice of return formats, including XML, JSON and plain text. XML and JSON results\r\n  display in a structured editor window for easier browsing. By default, results are returned\r\n  in a table control, with sortable columns, paging and search.\r\n\r\nQonsole is provided by [Epimorphics Ltd](http://www.epimorphics.com) at no charge, \r\nand is open-source under an Apache license.\r\n\r\n## Adding qonsole to your page\r\n\r\nClone the git repository ([epimorphics/qonsole](http://github.com/epimorphics/qonsole)), or\r\ndownload the files individually from GitHub. The `demo-` pages show a few variants on laying\r\nout the elements of the page body that Qonsole needs, and the JavaScript and CSS files you'll\r\nneed to include.\r\n\r\nQonsole is configured by passing a JSON data structure to the `qonsole.init()` call. Currently,\r\nthis config object allows you to specify:\r\n\r\n<dl>\r\n  <dt><code>elements</code> &ndash; available SPARQL end-points</dt>\r\n  <dd>The value of this config element is a JSON object, whose keys are short\r\n  references to available endpoints and whose values are URLs. One `default` end-point\r\n  should always be provided. The goal here is to allow different example queries potentially\r\n  to be run against different specific SPARQL endpoints. Example:\r\n<pre>\r\n    endpoints: {\r\n      \"default\":  \"http://environment.data.gov.uk/sparql/bwq/query\",\r\n    }\r\n</pre>\r\n  </dd>\r\n  <dt><code>prefixes</code> &ndash; shared list of pre-defined prefixes</dt>\r\n  <dd>The prefixes listed in this element will be added to each query, and may be\r\n  selected on or off by a single click. The value is a JSON object, whose keys are the\r\n  prefix short-name, and whose values are URIs. Example:\r\n\r\n<pre>\r\n    prefixes: {\r\n      \"bw\":       \"http://environment.data.gov.uk/def/bathing-water/\",\r\n      \"bwq\":      \"http://environment.data.gov.uk/def/bathing-water-quality/\",\r\n      \"ef-sp\":    \"http://location.data.gov.uk/def/ef/SamplingPoint/\",\r\n      \"interval\": \"http://reference.data.gov.uk/def/intervals/\",\r\n      \"stats\":    \"http://statistics.data.gov.uk/def/administrative-geography/\",\r\n      \"sr\":       \"http://data.ordnancesurvey.co.uk/ontology/spatialrelations/\",\r\n      \"rdf\":      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\r\n      \"rdfs\":     \"http://www.w3.org/2000/01/rdf-schema#\",\r\n      \"owl\":      \"http://www.w3.org/2002/07/owl#\",\r\n      \"xsd\":      \"http://www.w3.org/2001/XMLSchema#\"\r\n    },\r\n</pre>\r\n  </dd>\r\n  <dt><code>queries</code> &ndash; pre-defined example queries</dt>\r\n  <dd>\r\n  This elemen defines the example queries that users can select run, or\r\n  to base their own queries on. The value is a JSON array, each element of\r\n  which is one example query. Note that prefixes do not need to be\r\n  declared in the example queries:\r\n<pre>\r\n    queries: [\r\n      { \"name\": \"Properties of a named bathing water\",\r\n        \"query\": \"select ?predicate ?object\\nwhere {\\n\" +\r\n                 \"  ?bw rdfs:label \\\"Spittal\\\"@en ;\\n\" +\r\n                 \"      ?predicate ?object\\n}\"\r\n      },\r\n      { \"name\": \"all OWL classes\",\r\n        \"query\": \"select ?class ?label ?description\\nwhere {\\n\" +\r\n                 \"  ?class a owl:Class.\\n\" +\r\n                 \"  optional { ?class rdfs:label ?label}\\n\" +\r\n                 \"  optional { ?class rdfs:comment ?description}\\n}\"\r\n      }\r\n    ]\r\n</pre>\r\n  </dd>\r\n</dl>\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}